/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wallet;
import java.awt.CardLayout;
//import com.placeholder.PlaceHolder;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.security.spec.InvalidKeySpecException;
import java.util.*;
import java.net.*;
import java.io.*;

import com.dottorsoft.SimpleBlockChain.core.Block;
import com.dottorsoft.SimpleBlockChain.core.Transaction;
import com.dottorsoft.SimpleBlockChain.core.TransactionOutput;
import com.dottorsoft.SimpleBlockChain.core.Wallet;
import com.dottorsoft.SimpleBlockChain.networking.RecieveFromClientThread;
import com.dottorsoft.SimpleBlockChain.networking.RecieveThread;
import com.dottorsoft.SimpleBlockChain.networking.SendThread;
import com.dottorsoft.SimpleBlockChain.networking.SendToClientThread;
import com.dottorsoft.SimpleBlockChain.util.Parameters;
import com.dottorsoft.SimpleBlockChain.util.StringUtil;
import com.google.gson.*;
import com.google.gson.reflect.TypeToken;
import javax.swing.JOptionPane;

/**
 *
 * @author William
 */
public class CDClientUI extends javax.swing.JFrame {
    //PlaceHolder holder;
    //public static HashMap<String,TransactionOutput> UTXOs = new HashMap<String,TransactionOutput>();
    public static float minimumTransaction = 0.1f;
    public static Wallet wallet;
    //public static Wallet walletB = new Wallet();
    public static Transaction genesisTransaction;
    public static String IP;
    private static boolean computer = true;
    private static ServerSocket compServer;
    private static Socket compClient;
    private static Block recentBlock = new Block("0"); 
    //public static ExecuteCommands server = new ExecuteCommands(8888);
    //public static ExecuteCommands client = new ExecuteCommands(8889);
    /**
     * Creates new form CDClientUI
     */
    public CDClientUI() {
        initComponents();
        balanceCoins.setText(String.valueOf(wallet.getBalance())+ " M");
        //holder = new PlaceHolder(payToTextField, "Enter a Tech Tokens address (e.g. 2EE57059EE6D2AD31EADB385C2282D342971B308AE418)");
        //holder = new PlaceHolder(labelTextField, "Enter a label for this address to label the transaction");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        mainPanel = new javax.swing.JPanel();
        overviewPanel = new javax.swing.JPanel();
        walletPanel = new javax.swing.JPanel();
        balanceLabel = new javax.swing.JLabel();
        unconfirmedLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        balanceCoins = new javax.swing.JLabel();
        unconfirmedCoins = new javax.swing.JLabel();
        transactionCount = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        sendPanel = new javax.swing.JPanel();
        payLabel = new javax.swing.JLabel();
        payToTextField = new javax.swing.JTextField();
        labelLabel = new javax.swing.JLabel();
        labelTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        amountSpinner = new javax.swing.JSpinner();
        sendCoinBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        receivePanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        transactionPanel = new javax.swing.JPanel();
        recentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lab = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        overviewBtn = new javax.swing.JButton();
        transactionBtn = new javax.swing.JButton();
        sendBtn = new javax.swing.JButton();
        receiveBtn = new javax.swing.JButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 208, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 124, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Moneyish");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImages(null);

        mainPanel.setLayout(new java.awt.CardLayout());

        overviewPanel.setBackground(new java.awt.Color(255, 255, 255));

        walletPanel.setBackground(new java.awt.Color(255, 255, 255));
        walletPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Wallet", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        walletPanel.setForeground(new java.awt.Color(255, 255, 255));
        walletPanel.setName("Wallet"); // NOI18N

        balanceLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        balanceLabel.setText("Balance:");

        unconfirmedLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        unconfirmedLabel.setText("Pending:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Number of Transactions:");

        balanceCoins.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        balanceCoins.setText("00.000 M");

        unconfirmedCoins.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        unconfirmedCoins.setText("00.000 M");

        transactionCount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        transactionCount.setText("0");

        javax.swing.GroupLayout walletPanelLayout = new javax.swing.GroupLayout(walletPanel);
        walletPanel.setLayout(walletPanelLayout);
        walletPanelLayout.setHorizontalGroup(
            walletPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(walletPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(walletPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(unconfirmedLabel)
                    .addComponent(balanceLabel))
                .addGap(18, 18, 18)
                .addGroup(walletPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(balanceCoins)
                    .addComponent(unconfirmedCoins)
                    .addComponent(transactionCount))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        walletPanelLayout.setVerticalGroup(
            walletPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(walletPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(walletPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(balanceLabel)
                    .addComponent(balanceCoins))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(walletPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unconfirmedLabel)
                    .addComponent(unconfirmedCoins))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(walletPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(transactionCount))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        jButton2.setText("Public Key");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 214, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 238, Short.MAX_VALUE)
        );

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Moneyish logo.png"))); // NOI18N

        javax.swing.GroupLayout overviewPanelLayout = new javax.swing.GroupLayout(overviewPanel);
        overviewPanel.setLayout(overviewPanelLayout);
        overviewPanelLayout.setHorizontalGroup(
            overviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overviewPanelLayout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addGroup(overviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addGroup(overviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(walletPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateBtn)))
                .addGap(59, 59, 59)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        overviewPanelLayout.setVerticalGroup(
            overviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overviewPanelLayout.createSequentialGroup()
                .addGroup(overviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(overviewPanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(overviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(walletPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(overviewPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(overviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(updateBtn))
                .addGap(27, 27, 27))
        );

        mainPanel.add(overviewPanel, "overviewPanel");

        sendPanel.setBackground(new java.awt.Color(255, 255, 255));
        sendPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        payLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        payLabel.setText("Pay To:");

        payToTextField.setToolTipText("");
        payToTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                payToTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                payToTextFieldFocusLost(evt);
            }
        });
        payToTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payToTextFieldActionPerformed(evt);
            }
        });

        labelLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        labelLabel.setText("Label:");

        labelTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labelTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Amount:");

        sendCoinBtn.setText("Send");
        sendCoinBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendCoinBtnActionPerformed(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Moneyish logo.png"))); // NOI18N

        javax.swing.GroupLayout sendPanelLayout = new javax.swing.GroupLayout(sendPanel);
        sendPanel.setLayout(sendPanelLayout);
        sendPanelLayout.setHorizontalGroup(
            sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(sendPanelLayout.createSequentialGroup()
                        .addComponent(payLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(payToTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(sendPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(labelLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelTextField))
                    .addGroup(sendPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sendCoinBtn)
                            .addComponent(amountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );
        sendPanelLayout.setVerticalGroup(
            sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sendPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sendPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(sendPanelLayout.createSequentialGroup()
                        .addGroup(sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(payLabel)
                            .addComponent(payToTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelLabel)
                            .addComponent(labelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(sendPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(amountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 204, Short.MAX_VALUE)
                        .addComponent(sendCoinBtn)
                        .addGap(38, 38, 38))))
        );

        mainPanel.add(sendPanel, "sendPanel");

        receivePanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setText("Receiving Address: ");

        jLabel5.setText("Message Receieved: ");

        jLabel6.setText("Requested Amount:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Save");

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Moneyish logo.png"))); // NOI18N

        javax.swing.GroupLayout receivePanelLayout = new javax.swing.GroupLayout(receivePanel);
        receivePanel.setLayout(receivePanelLayout);
        receivePanelLayout.setHorizontalGroup(
            receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receivePanelLayout.createSequentialGroup()
                .addGroup(receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(receivePanelLayout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3)))
                    .addGroup(receivePanelLayout.createSequentialGroup()
                        .addGap(343, 343, 343)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(199, 199, 199))
        );
        receivePanelLayout.setVerticalGroup(
            receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(receivePanelLayout.createSequentialGroup()
                .addGroup(receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(receivePanelLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(receivePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(receivePanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        mainPanel.add(receivePanel, "receivePanel");

        transactionPanel.setBackground(new java.awt.Color(255, 255, 255));

        recentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Recent Transactions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        lab.setColumns(20);
        lab.setRows(5);
        jScrollPane1.setViewportView(lab);

        javax.swing.GroupLayout recentPanelLayout = new javax.swing.GroupLayout(recentPanel);
        recentPanel.setLayout(recentPanelLayout);
        recentPanelLayout.setHorizontalGroup(
            recentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
        );
        recentPanelLayout.setVerticalGroup(
            recentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
        );

        jButton3.setText("Update");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Moneyish logo.png"))); // NOI18N

        javax.swing.GroupLayout transactionPanelLayout = new javax.swing.GroupLayout(transactionPanel);
        transactionPanel.setLayout(transactionPanelLayout);
        transactionPanelLayout.setHorizontalGroup(
            transactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transactionPanelLayout.createSequentialGroup()
                .addGroup(transactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(transactionPanelLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(recentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(transactionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 205, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(114, 114, 114))
        );
        transactionPanelLayout.setVerticalGroup(
            transactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, transactionPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(recentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton3)
                .addContainerGap(78, Short.MAX_VALUE))
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
        );

        mainPanel.add(transactionPanel, "transactionPanel");

        overviewBtn.setBackground(new java.awt.Color(51, 153, 255));
        overviewBtn.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        overviewBtn.setText("Overview");
        overviewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overviewBtnActionPerformed(evt);
            }
        });

        transactionBtn.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        transactionBtn.setText("Transactions");
        transactionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionBtnActionPerformed(evt);
            }
        });

        sendBtn.setBackground(new java.awt.Color(102, 204, 0));
        sendBtn.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        sendBtn.setText("Send");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        receiveBtn.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        receiveBtn.setText("Receive ");
        receiveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(overviewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(transactionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(144, 144, 144)
                        .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(193, 193, 193)
                        .addComponent(receiveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(overviewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transactionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receiveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void overviewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overviewBtnActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "overviewPanel");
    }//GEN-LAST:event_overviewBtnActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "sendPanel");
    }//GEN-LAST:event_sendBtnActionPerformed

    private void receiveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiveBtnActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "receivePanel");
    }//GEN-LAST:event_receiveBtnActionPerformed

    private void transactionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionBtnActionPerformed
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "transactionPanel");
    }//GEN-LAST:event_transactionBtnActionPerformed

    private void labelTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labelTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_labelTextFieldActionPerformed

    private void payToTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payToTextFieldActionPerformed
        
    }//GEN-LAST:event_payToTextFieldActionPerformed

    private void payToTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_payToTextFieldFocusGained
        //payToTextField.setText("");
    }//GEN-LAST:event_payToTextFieldFocusGained

    private void payToTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_payToTextFieldFocusLost
        //payToTextField.setText("Enter a CryptoDinero address (e.g. fjk1hk4kaj)");
    }//GEN-LAST:event_payToTextFieldFocusLost

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void sendCoinBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendCoinBtnActionPerformed
        //server.connect(IP, 8889);
        // TODO add your handling code here:
            float prevBalance = wallet.getBalance(); 
            Parameters.recipient = payToTextField.getText();
            int value = (Integer) amountSpinner.getValue();
            float newVal = (float) value;
        if (computer == true){ //computer 2
            
            
            if(newVal < prevBalance){
                SendThread.message = "send";
                // Ensures the value is sent
                try{
                 Thread.sleep(3000);  //wait for operation to be conducted
                } catch (Exception e){System.out.println(e.getMessage());} 
                if (Wallet.balance != prevBalance){
                    try {
                        Transaction t = wallet.sendFunds(payToTextField.getText(), newVal);
                        Block temp = new Block(recentBlock.getHash());
                        temp.addTransaction(t);
                        recentBlock = temp;
                    } catch (Exception e){System.out.println(e.getMessage());}
                    
                }
            }
            
        } else{ // computer 1
                SendToClientThread.message = "send";
                // Ensures the value is sent
                try{
                 Thread.sleep(3000);  //wait for operation to be conducted
                } catch (Exception e){System.out.println(e.getMessage());} 
                if (Wallet.balance != prevBalance){
                    System.out.println("Here is the correct Balance:"+Wallet.balance);
                    try {
                        Transaction t = wallet.sendFunds(payToTextField.getText(), newVal);
                        Block temp = new Block(recentBlock.getHash());
                        temp.addTransaction(t);
                        recentBlock = temp;
                    } catch (Exception e){System.out.println(e.getMessage());}
                    
                }     
        }
        balanceCoins.setText(String.valueOf(Wallet.balance)+ " M");
//        /////////////////////////////////////////////////////////////server.getTransaction()
        //LinkedHashMap<String, Block> netParamBlockchain = gson.fromJson(server.getTransaction(), new TypeToken<LinkedHashMap<String, Block>>() {}.getType());
        /*if(netParamBlockchain.size() > Parameters.blockchain.size())
        {
            Parameters.blockchain = netParamBlockchain;
        }
        
        try {
            amountSpinner.commitEdit();
        } catch ( java.text.ParseException e ) { System.out.println("wrong number"); }
        int value = (Integer) amountSpinner.getValue();
        float newVal = (float) value;
        
        LinkedHashMap<String, Block> temp = Parameters.blockchain;
        Set set = temp.entrySet();
        Iterator iterator = set.iterator();
        Block tempBlock = null;
        
        while(iterator.hasNext())
        {
                Map.Entry item = (Map.Entry) iterator.next();
                //System.out.println("Key = " + item.getKey() + " Value = " + item.getValue());
                tempBlock = (Block) item.getValue();
                //System.out.println(p.getHash());
                String lastBlockHash = tempBlock.getHash();
                tempBlock = new Block(lastBlockHash);
        }    
        try {
            tempBlock.addTransaction(wallet.sendFunds(payToTextField.getText(), newVal));
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(CDClientUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(CDClientUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchProviderException ex) {
            Logger.getLogger(CDClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        addBlock(tempBlock.getHash(),tempBlock);
        System.out.println(StringUtil.getJson(Parameters.UTXOs));
        */
        /////////////////////////////////////////////////////////////server.getTransaction()
//        temp = Parameters.blockchain;
//        set = temp.entrySet();
//        iterator = set.iterator();
//        while(iterator.hasNext())
//        {
//                Map.Entry item = (Map.Entry) iterator.next();
//                //System.out.println("Key = " + item.getKey() + " Value = " + item.getValue());
//                tempBlock = (Block) item.getValue();
//                //System.out.println(p.getHash());
//                System.out.println(tempBlock);
//        }
       // HERE LOOK HERE 
       
    }//GEN-LAST:event_sendCoinBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        
        Gson gson = new Gson();
        /////////////////////////////////////////////////////////////server.getTransaction()
            /*LinkedHashMap<String, TransactionOutput> netParamUTXOs = new LinkedHashMap<String, TransactionOutput>();
            System.out.println("Net: " + netParamUTXOs.size() + "\nActual: " + Parameters.UTXOs.size());
            try{
                netParamUTXOs = gson.fromJson(server.getTransaction(), new TypeToken<LinkedHashMap<String, TransactionOutput>>() {}.getType());
            } catch (Exception e){
                
            }
            if (netParamUTXOs != null){
                if(netParamUTXOs.size() > Parameters.UTXOs.size()){
                    Parameters.UTXOs = netParamUTXOs;
                    System.out.println(StringUtil.getJson(Parameters.UTXOs));
                }
            }
         */   
        balanceCoins.setText(String.valueOf(Wallet.balance)+ " M");
        /*
                LinkedHashMap<String, Block> obj = new LinkedHashMap<String, Block>();
                if (null != gson.fromJson(server.getBlockChain(), new TypeToken<LinkedHashMap<String, Block>>() {}.getType())){
                 obj = gson.fromJson(server.getBlockChain(), new TypeToken<LinkedHashMap<String, Block>>() {}.getType());
                }
		if(obj.size() > Parameters.UTXOs.size())
                {
                    Parameters.blockchain = obj;
                }
                for (Map.Entry<String, Block> entry : Parameters.blockchain.entrySet()) {
                    System.out.println(entry.getValue());
                }
        transactionCount.setText(""+ Parameters.UTXOs.size());
       //server.connect("137.198.12.88", 8888);
        
        System.out.println("client "+Parameters.UTXOs);
        System.out.println("client " + obj);
        System.out.println(StringUtil.getJson(Parameters.UTXOs));
        System.out.println();

        for (Map.Entry<String, TransactionOutput> entry : Parameters.UTXOs.entrySet()) {
            System.out.println(entry.getValue());
        }
        */
    }//GEN-LAST:event_updateBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, ("Your Public Key is: \n" + wallet.getPublicKey()));
        System.out.println(wallet.getPublicKey());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
     Gson gson = new Gson();
     
     LinkedHashMap<String, TransactionOutput> obj = gson.fromJson(StringUtil.getJson(Parameters.UTXOs), new TypeToken<LinkedHashMap<String, TransactionOutput>>() {}.getType());

        String id ="";
        for (Map.Entry<String, TransactionOutput> entry : Parameters.UTXOs.entrySet())
        {  
           if(entry.getValue().reciepient.equals(wallet.getPublicKey()))
           {      
               
            id = id + "ID: " + entry.getValue().id + "\n";
            id = id + "Amount: " + entry.getValue().value+ " CD" + "\n\n";
           } 
        }
        lab.setText(id);
        lab.setEditable(false);
       
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws NoSuchAlgorithmException, IOException, InvalidKeySpecException, NoSuchProviderException, UnknownHostException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CDClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CDClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CDClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CDClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        IP = InetAddress.getLocalHost().getHostName();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CDClientUI().setVisible(true);
            }
        });
        //add our blocks to the blockchain ArrayList:
		Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider()); //Setup Bouncey castle as a Security Provider
		if (!(LoginPage.ipaddress.equals(""))){
                    computer = true; //computer 2
                    setUpComputer();
                    new Thread(new Runnable() {
			   public void run() {
			       try {
                                       SendThread sendthread = new SendThread(compClient);
                                       RecieveThread receivethread = new RecieveThread(compClient);
                                       new Thread(sendthread).start();
                                       new Thread(receivethread).start();
				} catch (Exception e) {
					e.getStackTrace();
				}
			   }
			}).start();
                    //recieves from server
                    RecieveThread recieveThread = new RecieveThread(compClient);
                    Thread thread =new Thread((Runnable) recieveThread);thread.start();
                    
                    
                } else {
                    computer = false; // computer 1
                    setUpComputer();
                    new Thread(new Runnable() {
			   public void run() {
			       try {
                                   while(true){
                                       Socket clientSocket = compServer.accept();
                                       SendToClientThread sendthread = new SendToClientThread(clientSocket);
                                       RecieveFromClientThread receivethread = new RecieveFromClientThread(clientSocket);
                                       new Thread(sendthread).start();
                                       new Thread(receivethread).start();
                                   }
				} catch (IOException e) {
					e.getStackTrace();
				}
			   }
			}).start();
                }
		//Create wallets:
		wallet = new Wallet();
                Parameters.pubKey = wallet.getPublicKey();
                //Print transaction ids
                TransactionOutput transactionID = new TransactionOutput();
                Gson gson = new Gson();
                int number = 0;
                
		
                    genesisTransaction = new Transaction(wallet.getPublicKey(), wallet.getPublicKey(), 100f, null);
                    genesisTransaction.generateSignature(wallet.getPrivateKey());	 //manually sign the genesis transaction	
                    genesisTransaction.setTransactionId("1"); //manually set the transaction id
                    genesisTransaction.getOutputs().add(new TransactionOutput(genesisTransaction.getReciepient(), genesisTransaction.getSender(), genesisTransaction.getValue(), genesisTransaction.getTransactionId())); //manually add the Transactions Output
                    Parameters.UTXOs.put(genesisTransaction.getOutputs().get(0).id, genesisTransaction.getOutputs().get(0)); //its important to store our first transaction in the UTXOs list.
                    
                
		//create genesis transaction, which sends 100 NoobCoin to wallet: 
		
		System.out.println("Creating and Mining Genesis block... ");
		recentBlock.addTransaction(genesisTransaction);
		addBlock(recentBlock.getHash(),recentBlock);
		/*
		//testing
		Block block1 = new Block(genesis.getHash());
		System.out.println("\nWalletA's balance is: " + wallet.getBalance());
		System.out.println("\nWalletA is Attempting to send funds (40) to WalletB...");
		block1.addTransaction(wallet.sendFunds(walletB.getPublicKey(), 40f));
		addBlock(block1.getHash(),block1);
		System.out.println("\nWalletA's balance is: " + wallet.getBalance());
		System.out.println("WalletB's balance is: " + walletB.getBalance());
		
		Block block2 = new Block(block1.getHash());
		System.out.println("\nWalletA Attempting to send more funds (1000) than it has...");
		block2.addTransaction(wallet.sendFunds(walletB.getPublicKey(), 1000f));
		addBlock(block2.getHash(),block2);
		System.out.println("\nWalletA's balance is: " + wallet.getBalance());
		System.out.println("WalletB's balance is: " + walletB.getBalance());
		
		Block block3 = new Block(block2.getHash());
		System.out.println("\nWalletB is Attempting to send funds (20) to WalletA...");
		block3.addTransaction(walletB.sendFunds( wallet.getPublicKey(), 20));
		System.out.println("\nWalletA's balance is: " + wallet.getBalance());
		System.out.println("WalletB's balance is: " + walletB.getBalance());
		addBlock(block3.getHash(),block3);
	
		if(!ChainUtils.isChainValid(Parameters.blockchain, genesisTransaction)){
			System.out.println("Not Valid Chain!!");
			return;
		}
               
                for (Map.Entry<String, Block> entry : Parameters.blockchain.entrySet()) {
                    Block b = entry.getValue();
                    ArrayList<Transaction> t = b.getTransactions();
                    for(Transaction r : t){
                        String trans = r.getReciepient();
                        //System.out.println(trans);
                        
                    }
                    
                    System.out.println();
                    
                }
                
                /*
//                System.out.println("Original Hashes");
//                System.out.println(genesis.getHash() + "\n" +block1.getHash() + "\n" +block2.getHash() + "\n" +block3.getHash());
                System.out.println("\n");
                
                Gson gson = new Gson();
                /////////////////////////////////////////////////////////////server.getTransaction()
                LinkedHashMap<String, TransactionOutput> obj = gson.fromJson(StringUtil.getJson(Parameters.UTXOs), new TypeToken<LinkedHashMap<String, TransactionOutput>>() {}.getType());
		System.out.println("client "+Parameters.UTXOs);
                System.out.println("client " + obj.size());
                System.out.println(StringUtil.getJson(Parameters.UTXOs));
                System.out.println();
                
                for (Map.Entry<String, TransactionOutput> entry : Parameters.UTXOs.entrySet()) {
                    System.out.println(entry.getValue());
                    // now work with key and value...
                }
                //transactionID.showTransactions(wallet.getPublicKey());
		//
		/*String blockchainJson = StringUtil.getJson(Parameters.blockchain);
		System.out.println("\nThe block chain: ");
		System.out.println(blockchainJson);
		
//		ExecuteCommands server = new ExecuteCommands(8888);
//		ExecuteCommands client = new ExecuteCommands(8889);
		//ExecuteCommands client2 = new ExecuteCommands(8890);
                */
		//client.connect("137.198.12.62", 8889);
		//client2.connect("127.0.0.1", 8888);
		//System.out.println("RECEIVED: "+ client.register());
		//client2.register();
		//server.connect("127.0.0.1", 8890);
		//server.connect("localhost", 8889);
                
               /*
                Gson gson = new Gson();
                LinkedHashMap<String, Block> obj = gson.fromJson(server.getBlockChain(), new TypeToken<LinkedHashMap<String, Block>>() {}.getType());
		System.out.println("client "+Parameters.blockchain);
                System.out.println("client " + obj);
                Parameters.blockchain = obj;
                if(!ChainUtils.isChainValid(Parameters.blockchain, genesisTransaction)){
			System.out.println("Not Valid Chain!!");
			return;
		}
                */
                
//                client.connect("127.0.0.1", 8888);
//                System.out.println("client "+client.getBlockChainSize());
		
		//server.pingAll();
		//System.out.println("client2"+client2.getBlockChainSize());
		//server.connect("127.0.0.1", 8889);
		
		//System.out.println("server"+server.getBlockChainSize());
		//String chain = client.getBlockChain();
		//System.out.println(chain);
		//System.out.println(client.getBlockChainSize());
		//System.out.println(client2.getBlockChainSize());
		//Block block4 = new Block();
		//ArrayList<Block> c = block4.fromJsonToChain(chain);
		//System.out.println("***************");
		//System.out.println(StringUtil.getJson(c));
        /* Create and display the form */
        
        
    }
    public static void setUpComputer() throws UnknownHostException, IOException{
        //Computer 1
        if (computer == false){
            compServer = new ServerSocket(8888);
            System.out.println("Server started on 8888");
        }
        // Computer 2
        else {
            compClient = new Socket(LoginPage.ipaddress, 8888);
        }
    }
    public static void addBlock(String current, Block newBlock) {
		newBlock.mineBlock(Parameters.difficulty);
		Parameters.blockchain.put(current, newBlock);
    }
    public static void sendUpdate(){
       if (computer == true){
           SendThread.message = "sendUpdate";
       }else {
           SendToClientThread.message ="sendUpdate";
       }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JSpinner amountSpinner;
    public static javax.swing.JLabel balanceCoins;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextArea lab;
    private javax.swing.JLabel labelLabel;
    private javax.swing.JTextField labelTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton overviewBtn;
    private javax.swing.JPanel overviewPanel;
    private javax.swing.JLabel payLabel;
    public static javax.swing.JTextField payToTextField;
    private javax.swing.JButton receiveBtn;
    private javax.swing.JPanel receivePanel;
    private javax.swing.JPanel recentPanel;
    private javax.swing.JButton sendBtn;
    private javax.swing.JButton sendCoinBtn;
    private javax.swing.JPanel sendPanel;
    private javax.swing.JButton transactionBtn;
    private javax.swing.JLabel transactionCount;
    private javax.swing.JPanel transactionPanel;
    private javax.swing.JLabel unconfirmedCoins;
    private javax.swing.JLabel unconfirmedLabel;
    private javax.swing.JButton updateBtn;
    private javax.swing.JPanel walletPanel;
    // End of variables declaration//GEN-END:variables
}
